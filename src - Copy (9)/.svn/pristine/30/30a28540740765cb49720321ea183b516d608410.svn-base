import { Component, OnInit } from '@angular/core';
import { BetService } from '../bet.service';

@Component({
  selector: 'app-platform',
  templateUrl: './platform.page.html',
  styleUrls: ['./platform.page.scss'],
})
export class PlatformPage implements OnInit {

  constructor(private  bet:BetService) { 
    
  }
  wallet:any;
  amount:any;
  initial:any;
  final:any;
  timers:any;
  payout:any;
  input_amount = "";
  stocks:any;
  livedata:any;
  ngOnInit() {
    this.bet.live_btc().subscribe((res)=>{
      console.log(res);
      this.livedata = res.close;

      setInterval(()=>{
        this.bet.live_btc().subscribe((res)=>{
          console.log(res);
          this.livedata = res.close;
        })
      },60000)
    })
    this.bet.stock_view().subscribe((res)=>{
      console.log(res);
      this.stocks = res.results;
    })
    console.log(this.input_amount);
    this.bet.view_timers().subscribe((res)=>{
      console.log(res);
      this.timers = res.response;
      this.payout = res.response[0].payout;
      console.log(this.payout);
    })
    this.bet.view_wallet().subscribe((res)=>{
      console.log(res);
      this.wallet = res;
      this.amount = this.wallet.response[0].amount;
      console.log(this.amount);
    })
    
    // setInterval(()=>{
    //   this.getlivedata;
    // },2000)
  }
  placebet_up(){
    var final  = 2000;
    this.bet.view_betcategories().subscribe((res)=>{
      console.log(res);
      this.initial = res[0].amount;
    })
    const data = {
      betcategory_id : 3,
      betamount : +this.input_amount,
      duration : "3"
    }
    if((this.initial + data.betamount)>final){
      
    }
    this.bet.place_bet(data).subscribe((res)=>{
      console.log(res.start_date);
      setTimeout(() => {
        var payout = this.payout.toString();
        var payout_arr = payout.split(".");
        console.log(payout_arr);
        const val = {
          betcategory_id : 3,
          betamount : data.betamount,
          duration : data.duration,
          start_date : res.start_date,
          start_time : res.start_time,
          profitloss : final>=this.initial?((+payout_arr[1]*data.betamount)/100):-data.betamount
        }
        this.bet.final_bet(val).subscribe((res)=>{
          console.log(res);
        })
      },+data.duration*1000);
    })

    
  }

  placebet_down(){
    var final  = 2000;
    this.bet.view_betcategories().subscribe((res)=>{
      console.log(res);
      this.initial = res[0].amount;
    })
    const data = {
      betcategory_id : 3,
      betamount : -100,
      duration : "3"
    }
    this.bet.place_bet(data).subscribe((res)=>{
      console.log(res.start_date);
      setTimeout(() => {
        const val = {
          betcategory_id : 3,
          betamount : data.betamount,
          duration : data.duration,
          start_date : res.start_date,
          start_time : res.start_time,
          profitloss : this.initial + data.betamount - final
        }
        this.bet.final_bet(val).subscribe((res)=>{
          console.log(res);
        })
      },+data.duration*1000);
    })
  }
  pay_out(event:any){
    console.log(event.target.value);
    this.bet.single_payout(event.target.value).subscribe((res)=>{
      console.log(res);
      this.payout = res.response[0].payout;
    })
  }

  
}
